// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package chrome

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE631ef32DecodeGithubComRaiProjectTracerChrome(in *jlexer.Lexer, out *publishInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE631ef32EncodeGithubComRaiProjectTracerChrome(out *jwriter.Writer, in publishInfo) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v publishInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE631ef32EncodeGithubComRaiProjectTracerChrome(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v publishInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE631ef32EncodeGithubComRaiProjectTracerChrome(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *publishInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE631ef32DecodeGithubComRaiProjectTracerChrome(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *publishInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE631ef32DecodeGithubComRaiProjectTracerChrome(l, v)
}
func easyjsonE631ef32DecodeGithubComRaiProjectTracerChrome1(in *jlexer.Lexer, out *TraceEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "cat":
			out.Category = string(in.String())
		case "ph":
			out.EventType = string(in.String())
		case "ts":
			out.Timestamp = int64(in.Int64())
		case "dur":
			out.Duration = time.Duration(in.Int64())
		case "pid":
			out.ProcessID = int64(in.Int64())
		case "tid":
			out.ThreadID = int64(in.Int64())
		case "args":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Args = make(map[string]interface{})
				} else {
					out.Args = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 interface{}
					if m, ok := v1.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v1.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v1 = in.Interface()
					}
					(out.Args)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "sf":
			out.Stack = int(in.Int())
		case "esf":
			out.EndStack = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE631ef32EncodeGithubComRaiProjectTracerChrome1(out *jwriter.Writer, in TraceEvent) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		out.String(string(in.Name))
	}
	if in.Category != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"cat\":")
		out.String(string(in.Category))
	}
	if in.EventType != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ph\":")
		out.String(string(in.EventType))
	}
	if in.Timestamp != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ts\":")
		out.Int64(int64(in.Timestamp))
	}
	if in.Duration != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"dur\":")
		out.Int64(int64(in.Duration))
	}
	if in.ProcessID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"pid\":")
		out.Int64(int64(in.ProcessID))
	}
	if in.ThreadID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"tid\":")
		out.Int64(int64(in.ThreadID))
	}
	if len(in.Args) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"args\":")
		if in.Args == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Args {
				if !v2First {
					out.RawByte(',')
				}
				v2First = false
				out.String(string(v2Name))
				out.RawByte(':')
				if m, ok := v2Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v2Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v2Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.Stack != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sf\":")
		out.Int(int(in.Stack))
	}
	if in.EndStack != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"esf\":")
		out.Int(int(in.EndStack))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TraceEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE631ef32EncodeGithubComRaiProjectTracerChrome1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TraceEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE631ef32EncodeGithubComRaiProjectTracerChrome1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TraceEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE631ef32DecodeGithubComRaiProjectTracerChrome1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TraceEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE631ef32DecodeGithubComRaiProjectTracerChrome1(l, v)
}
func easyjsonE631ef32DecodeGithubComRaiProjectTracerChrome2(in *jlexer.Lexer, out *Trace) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "traceEvents":
			if in.IsNull() {
				in.Skip()
				out.TraceEvents = nil
			} else {
				in.Delim('[')
				if out.TraceEvents == nil {
					if !in.IsDelim(']') {
						out.TraceEvents = make(TraceEvents, 0, 1)
					} else {
						out.TraceEvents = TraceEvents{}
					}
				} else {
					out.TraceEvents = (out.TraceEvents)[:0]
				}
				for !in.IsDelim(']') {
					var v3 TraceEvent
					(v3).UnmarshalEasyJSON(in)
					out.TraceEvents = append(out.TraceEvents, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "displayTimeUnit":
			out.DisplayTimeUnit = string(in.String())
		case "stackFrames":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Frames = make(map[string]EventFrame)
				} else {
					out.Frames = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 EventFrame
					(v4).UnmarshalEasyJSON(in)
					(out.Frames)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "timeUnit":
			out.TimeUnit = string(in.String())
		case "otherData":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.OtherData = make(map[string]interface{})
				} else {
					out.OtherData = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v5 interface{}
					if m, ok := v5.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v5.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v5 = in.Interface()
					}
					(out.OtherData)[key] = v5
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE631ef32EncodeGithubComRaiProjectTracerChrome2(out *jwriter.Writer, in Trace) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.TraceEvents) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"traceEvents\":")
		if in.TraceEvents == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.TraceEvents {
				if v6 > 0 {
					out.RawByte(',')
				}
				(v7).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.DisplayTimeUnit != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"displayTimeUnit\":")
		out.String(string(in.DisplayTimeUnit))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"stackFrames\":")
	if in.Frames == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v8First := true
		for v8Name, v8Value := range in.Frames {
			if !v8First {
				out.RawByte(',')
			}
			v8First = false
			out.String(string(v8Name))
			out.RawByte(':')
			(v8Value).MarshalEasyJSON(out)
		}
		out.RawByte('}')
	}
	if in.TimeUnit != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"timeUnit\":")
		out.String(string(in.TimeUnit))
	}
	if len(in.OtherData) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"otherData\":")
		if in.OtherData == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v9First := true
			for v9Name, v9Value := range in.OtherData {
				if !v9First {
					out.RawByte(',')
				}
				v9First = false
				out.String(string(v9Name))
				out.RawByte(':')
				if m, ok := v9Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v9Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v9Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Trace) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE631ef32EncodeGithubComRaiProjectTracerChrome2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Trace) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE631ef32EncodeGithubComRaiProjectTracerChrome2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Trace) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE631ef32DecodeGithubComRaiProjectTracerChrome2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Trace) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE631ef32DecodeGithubComRaiProjectTracerChrome2(l, v)
}
func easyjsonE631ef32DecodeGithubComRaiProjectTracerChrome3(in *jlexer.Lexer, out *EventFrame) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "parent":
			out.Parent = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE631ef32EncodeGithubComRaiProjectTracerChrome3(out *jwriter.Writer, in EventFrame) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	if in.Parent != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"parent\":")
		out.Int(int(in.Parent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventFrame) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE631ef32EncodeGithubComRaiProjectTracerChrome3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventFrame) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE631ef32EncodeGithubComRaiProjectTracerChrome3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventFrame) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE631ef32DecodeGithubComRaiProjectTracerChrome3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventFrame) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE631ef32DecodeGithubComRaiProjectTracerChrome3(l, v)
}
